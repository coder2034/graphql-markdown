import { promises as fs } from "fs";
import path from "path";

import prettier from "prettier";

import { generateMarkdownFromSchema } from "@edno/graphql-markdown";

import { PluginOptions, Sidebar } from "../types";

const SIDEBAR_FILE = "sidebar-schema.js";

const prettifyJSON = (content: string): string => {
  return prettier.format(content, { parser: "json" });
};

const prettifyMarkdown = (content: string): string => {
  return prettier.format(content, { parser: "markdown" });
};

const renderHomepage = async (
  homepageLocation: string,
  options: PluginOptions
): Promise<string> => {
  const homepage = await fs.readFile(homepageLocation, "utf8");

  const filePath = path.join(options.rootPath, path.basename(homepageLocation));
  await fs.writeFile(filePath, prettifyMarkdown(homepage), "utf8");

  return path.relative("./", filePath);
};

const renderSidebar = async ({
  rootPath,
  baseURL,
}: PluginOptions): Promise<string> => {
  const sidebar: Record<string, Sidebar> = {
    schemaSidebar: [
      {
        dirName: baseURL,
        type: "autogenerated",
      },
    ],
  };

  const filePath = path.join(rootPath, SIDEBAR_FILE);
  await fs.writeFile(filePath, prettifyJSON(JSON.stringify(sidebar)), "utf8");

  return path.relative("./", filePath);
};

export const generateDocFromSchema = async (
  schemaLocation: string,
  options: PluginOptions
): Promise<{ pages: number; sidebar: string }> => {
  const pages = await generateMarkdownFromSchema({ saveToFiles: true });

  // eslint-disable-next-line no-magic-numbers
  if (typeof pages === "undefined" || pages.length === 0) {
    throw new Error("Parsing error, no pages generated");
  }

  if (typeof options === "undefined") {
    throw new Error("Parsing error, no pages generated");
  }

  await renderHomepage(options.homepage, options);
  const sidebarPath = await renderSidebar(options);

  return { pages: pages.length, sidebar: sidebarPath };
};
